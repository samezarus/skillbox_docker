Изоляция происходит за счёт namespaces, а ресурсы выделяются за счёт cgroups

Контейнер - програмный комплекс, запущенный на основе докер-образа

Инфо:

    docker system df

Сохранение контейнера для переноса:
    
    Остановить контейнер:

        docker stop <имя контейнера>

    Сохранить контейнер в образ:

        docker commit <имя контейнера> <имя нового образа>

    docker save <имя контейнера> > <имя архива>.tar

    Перенести на жругой сервер

    Импортировать образ на другом сервере:
        
        docker load < <имя архива>.tar

Докер-образы:

    Это набор файлов и папок (под капотом)

    docker build <контекст> -t <имя образа> - сборка образа из файла Dockerfile

        <контекст> - место расположения Dockerfile
        "-t" - имя/тэг образа

    docker search <имя образа> - поиск образа

    docker pull <имя образа> - копирование образа локальное хранилище

    docker image inspect <имя образа> - инфо о образе 

    docker image ls - список образов в локальном хранилище

    docker image tag <целевой образ> <новый образ>:<тэг> - копирование целевого образа в новый с новыи тегом

        docker image tag ubuntu:22.04 ubuntu:test (ubuntu:22.04 останется и на основе него появится ubuntu:test)

    docker image rm <имя образа> - удаление образа из локального хранилища

    docker image save -o <путь к файлу-архиву> <имя образа> - сохранение образа в файл-архив

    docker image import -m <строковый коментарий> <файл-архив> - импорт образа из файла-архива (создаться новый)

    docker image load -i <файл-архив> - воссащдание образа из файла-архива (т.е. перепишет текущий образ)

Докер-контейнеры:

    !!! Контейнер в состаянии UP пока в нём рабоет процесс с PID 1

    docker container ps/list - список контейнеров

    docker container rename <id контейнера> <новое имя контейнера>

    docker container commit -m <строковый коментарий> <имя контейнера> <имя образа> - создать образ 
    на основе указанного контейнера (т.е. записать состояние контейгера в образ)

    docker cp <id контейнера>:<имя файла> <путь назначения> - копирование файла из контейнера на хост

    docker cp <имя файла> <id контейнера>:<путь назначения>  - копирование файла с хоста в контейнер

    docker container stats

    docker run <id образа>
        
        Запуск контейнера

        "--name" - именование контейнерв
        "-it" - интерактивный режим
        "--rm" - удалить контейнер после отклбчения от него
        "-d" - режим демона (detouch)
        "--" - если в образе были определены параметры в CMD, то их можно переопределить

    docker container exec <id контейнера> <команда> - запуск контейнера с командой

        docker container exec -it mycontainer1 /bin/bash

Том/Volume:

    docker volume ls - список томов

    docker volume inspect <имя тома>

    docker volume create --name <имя тома>

    Монтирование:

        Каталога:
            
            docker run -it --mount type=bind,source=<хостовый путь>,deatination=<путь в контейнере> <имя образа>

            Используется для прокидывания кода, конфигов и тд

        Тома:

            docker run -it --mount type=volume,source=<имя тома>,deatination=<путь в контейнере> <имя образа>

        Временную файловую систему:

            docker run -it --mount type=tmpfs,deatination=<путь в контейнере> <имя образа>

            docker run -it --tmpfs <путь в контейнере> <имя образа>

Сеть:

    Драйверы:

        bridge - связь нескольких контейнеров (в основном)

        host - убирает сетевую изоляцию между хостом и контейнером

        none - полностью выключает сеть у контейнера (в паре с custom)

        overlay - docker swarm (контейнеры на разных хостах)

        macvlan - для легаси кода (использование мас-адреса)

        custom - самописные

    docker network ls - список сетей

    docker network create --driver/-d <тип драйвера> <имя сети> - создать сеть

    docker network rm <имя сети> - удалить сеть

    docker network connect <имя сети> <имя контейнера> - подключить сеть к работающему контейнеру

        Если есть уже какая-либо сеть, её нужно сначала отключить (docker network disconnect)
    
        Запуск нового контейнера с сетью(созданой):

            docker run -it --network=<имя сети> <имя образа>

    docker network disconnect <имя сети> <имя контейнера>

    порты:

        docker run -d -p 8080:80 nginx (мапинг 8080 в контейнер на порт 80)

Контекст:

    Инструмент для переключениями между хостами, где стоит Docker

    docker context ls - список контекстов

    docker context inspect <имя контекста>

    docker context create <имя контекста> - создание контекста

    docker context export <имя контекста> - экспорт контекста в файл ...

    docker context import <имя создаваемого контекста> <имя файла> - импорт контекста из файл ...

    docker context use <имя контекста> - переключиться на выбранный контекст

Docker Builder:

Docker Trust:

    Ключ для подписи образов

Хранение:

    Docker hub

        Логин:
            docker login -u sameza

        Upload image:

            https://docs.docker.com/get-started/workshop/04_sharing_app/

            docker tag getting-started YOUR-USER-NAME/getting-started:latest
            docker push YOUR-USER-NAME/getting-started:latest

            

    Docker Regestry:

        https://hub.docker.com/_/registry

        Представлен в виде контейнера и служит локальным аналогом Docker hub

        Запуск контейнера:
            docker run -d -p 5000:5000 --restart always --name registry registry:2

        Если надо качаем кандитата:
            docker pull <образ с docker hub>

        Если надо, то переименовываем образ в своё имя:
            docker tag <образ с docker hub> localhost:5000/<новый тэг>
        
        Пушим образ в локальный registry:
            docker push localhost:5000/<новый тэг>

        Список образов в registry:
            curl http://localhost:5000/v2/_catalog

    RedHat Quey

    Harbor
